# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.5.0"

default_platform :ios

platform :ios do

  commit = last_git_commit
  scheme = 'SwipeIt'
  keychain_name = 'swipeit-keychain'
  run_location = is_ci? ? 'Travis' : 'Local'

  def slack_msg(msg, commit, success = true)
    slack(
      channel: "swipeit",
      payload: {
        'Message' => commit[:message],
        'Author' => commit[:author],
        'Commit' => "https://github.com/ivanbruel/SwipeIt/commit/#{commit[:commit_hash]}"
      },
      default_payloads: [],
      message: msg,
      success: success)
  end

  def handle_keychain(keychain_name)
    begin
      create_keychain(
        name: keychain_name,
        unlock: true,
        timeout: 3600,
        lock_when_sleeps: true,
        default_keychain: true,
        password: ENV['SWIPEIT_CERTIFICATE_KEY']
      )
    rescue
      unlock_keychain(
        path: keychain_name,
        password: ENV['SWIPEIT_CERTIFICATE_KEY'],
        set_default: true
      )
    end
  end

  def cleanup_keychain(keychain_name)
    delete_keychain(name: keychain_name)
  end

  def update_build_version
    build_number = Time.new.strftime("%y%m%d.%H%M")
    increment_build_number build_number: build_number
  end

  def handle_certificate(cert_name, key, keychain_name)
    sh "openssl aes-256-cbc -k \"#{ENV['SWIPEIT_CERTIFICATE_KEY']}\" -in certificates/#{cert_name}.p12.enc -d -a -out certificates/#{cert_name}.p12"
    import_certificate(
      certificate_path: "fastlane/certificates/#{cert_name}.p12",
      certificate_password: key,
      keychain_name: keychain_name
    )
  end

  def cleanup_certificates
    sh "rm certificates/development.p12"
    sh "rm certificates/distribution.p12"
  end

  before_all do
    # ensure_git_status_clean
    ENV["SLACK_URL"] = ENV['SWIPEIT_SLACK_URL']

    slack_msg("#{run_location} running Fastlane #{lane_context[SharedValues::LANE_NAME]}", commit)

    cocoapods(repo_update: true)
    handle_keychain(keychain_name)

  end

  desc "Runs all the unit tests"
  desc "Submits a new Beta Build to Fabric"
  desc "Submits a new Beta Build to Apple TestFlight"
  lane :travis do
    test
    update_build_version
    fabric_beta(scheme: scheme)
    itunes(scheme: scheme)
  end

  desc "Runs all the unit tests"
  lane :test do
    scan(scheme: scheme)
  end

  desc "Submit a new Beta Build to Fabric"
  desc "This will also make sure the profile is up to date"
  lane :fabric do
    update_build_version
    fabric_beta(scheme: scheme)
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :itc do
    update_build_version
    itunes(scheme: scheme)
  end

  private_lane :fabric_beta do |options|
    scheme = options[:scheme]
    handle_certificate("development", ENV['SWIPEIT_DEVELOPMENT_KEY'], keychain_name)

    sigh(
      development: true,
      output_path: "/tmp/"
    )

    build(
      scheme: scheme,
      signId: ENV['SWIPEIT_SIGNING_IDENTITY_DEV']
    )

    environment = scheme.upcase

    crashlytics(
      api_token: ENV['SWIPEIT_FABRIC_CLIENT_ID'],
      build_secret: ENV['SWIPEIT_FABRIC_SECRET'],
      ipa_path: "/tmp/#{scheme}.ipa",
      notes: last_git_commit[:message],
      groups: ["#{scheme}"]
    )

  end

  private_lane :itunes do |options|
    scheme = options[:scheme]

    handle_certificate("distribution", ENV['SWIPEIT_DISTRIBUTION_KEY'], keychain_name)

    sigh(
      skip_install: true,
      development: false,
      output_path: "/tmp"
    )

    build(
      scheme: scheme,
      signId: ENV['SWIPEIT_SIGNING_IDENTITY_PROD']
    )

    pilot(
      ipa: "/tmp/#{scheme}.ipa",
      skip_submission: true,
      team_id: ENV['SWIPEIT_ITUNES_TEAM_ID'],
      skip_waiting_for_build_processing: true
    )

  end

  private_lane :build do |options|
    scheme = options[:scheme]
    signingId = options[:signId]

    gym(
      scheme: "#{scheme}",
      configuration: scheme,
      use_legacy_build_api: false,
      include_bitcode: true,
      workspace: "#{scheme}.xcworkspace",
      output_directory: "/tmp", # Change to temp folder
      output_name: "#{scheme}.ipa",
      codesigning_identity: "#{signingId}",
      clean: false,
      xcargs: "ARCHIVE=YES" # Used to tell the Fabric run script to upload dSYM file
    )
  end


  # This lane is called, only if the executed lane was successful
  after_all do |lane|
    notification(message: "Fastlane finished '#{lane}' successfully") # Mac OS X Notification
    slack_msg("#{run_location} successfully distributed #{scheme} into #{lane} :rocket:", commit)
    cleanup_certificates
    cleanup_keychain(keychain_name)
  end

  error do |lane, exception|
    notification(message: "#{run_location} Fastlane '#{lane}' errored") # Mac OS X Notification
    slack_msg(exception.to_s, commit, false)
    cleanup_certificates
    cleanup_keychain(keychain_name)
  end
end



# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
