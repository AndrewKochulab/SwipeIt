# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
#update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.5.0"

default_platform :ios

platform :ios do

  commit = last_git_commit
  run_location = is_ci? ? 'Travis' : 'Local'

  before_all do
    # ensure_git_status_clean
    setup
    slack_msg(msg: "#{run_location} running Fastlane #{lane_context[SharedValues::LANE_NAME]}", success: true)
  end

  desc "Runs all the unit tests"
  desc "Submits a new Beta Build to Fabric"
  desc "Submits a new Beta Build to Apple TestFlight"
  lane :travis do
    if (ENV['TRAVIS_PULL_REQUEST'] == "false" && git_branch == "master") || !is_ci
      release
    else
      test
    end
  end

  desc "Runs all the unit tests"
  lane :test do
    scan
  end

  desc "Release lane"
  desc "Tries to optimize time compiling by calling Gym before Scan"
  lane :release do
    update_build_number
    match(type: "adhoc", force_for_new_devices: true)
    match(type: "appstore")
    gym(clean: false, include_bitcode: true)
    scan(skip_build: true, clean: false)
    upload_crashlytics
    upload_itunes
  end

  desc "Submit a new Beta Build to Fabric"
  desc "This will also make sure the profile is up to date"
  lane :fabric do
    update_build_number
    fabric_beta
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :itc do
    update_build_number
    itunes
  end

  private_lane :fabric_beta do
    match(type: "adhoc", force_for_new_devices: true)
    gym
    upload_crashlytics
  end

  private_lane :itunes do
    match(type: "appstore")
    gym(include_bitcode: true)
    upload_itunes
  end

  private_lane :upload_crashlytics do
    crashlytics(
      api_token: ENV['SWIPEIT_FABRIC_CLIENT_ID'],
      build_secret: ENV['SWIPEIT_FABRIC_SECRET'],
      notes: commit[:message],
      groups: ["SwipeIt"]
    )
  end

  private_lane :upload_itunes do
    pilot(
      skip_submission: true,
      team_id: ENV['SWIPEIT_ITUNES_TEAM_ID'],
      skip_waiting_for_build_processing: true
    )
  end

  # Private Lanes
  private_lane :setup do
    ENV["SLACK_URL"] = ENV['SWIPEIT_SLACK_URL']
    ENV["MATCH_PASSWORD"] = ENV["SWIPEIT_CERTIFICATE_KEY"]
    ENV["FASTLANE_PASSWORD"] = ENV["SWIPEIT_ITUNES_PASSWORD"]

    cocoapods(repo_update: true)
  end

  private_lane :update_build_number do
    build_number = Time.new.strftime("%y%m%d.%H%M")
    increment_build_number build_number: build_number
  end

  private_lane :slack_msg do |params|
    slack(
      channel: "swipeit",
      payload: {
        'Message' => commit[:message],
        'Author' => commit[:author],
        'Commit' => "https://github.com/ivanbruel/SwipeIt/commit/#{commit[:commit_hash]}"
      },
      default_payloads: [],
      message: params[:msg],
      success: params[:success])
  end

  # This lane is called, only if the executed lane was successful
  after_all do |lane|
    notification(message: "Fastlane finished '#{lane}' successfully") # Mac OS X Notification
    slack_msg(msg: "#{run_location} successfully distributed SwipeIt into #{lane} :rocket:", success: true)
  end

  error do |lane, exception|
    notification(message: "Fastlane '#{lane}' errored") # Mac OS X Notification
    slack_msg(msg: exception.to_s, success: false)
  end
end



# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
